FROM golang:1.19-alpine AS build_base

RUN apk add --no-cache git
RUN apk add build-base

# Set the Current Working Directory inside the container
WORKDIR /tmp/purebackend

# We want to populate the module cache based on the go.{mod,sum} files.
COPY go.mod .
COPY go.sum .

RUN go mod download

COPY . .

# Unit tests
RUN CGO_ENABLED=0 go test -v

# Build the Go app
RUN go build -o ./out/purebackend ./examples/base/main.go

ARG HOST_PORT=8080
ENV PORT=$HOST_PORT
# ENV HOST_URL
# ENV SCHEME
ENV DATABASE=
ENV DATABASE_URL=
ENV CGO_ENABLED=
ENV PURE_ADMIN_AUTH_TOKEN_SECRET=
ENV PURE_ADMIN_AUTH_TOKEN_DURATION=
ENV PURE_PASSWORD_RESET_TOKEN_SECRET=
ENV PURE_PASSWORD_RESET_TOKEN_DURATION=
ENV ADMIN_UUID=
ENV ADMIN_EMAIL=
ENV ADMIN_PASSWORD=
ENV ADMIN_HANDLE=
ENV ADMIN_ORG_HANDLE=
ENV ADMIN_ORG_NAME=
ENV PURE_R2_ENABLE=
ENV PURE_R2_ACCOUNT_ID=
ENV PURE_R2_BUCKET=
ENV PURE_R2_ENDPOINT=
ENV PURE_R2_ACCESS_KEY=
ENV PURE_R2_SECRET=
ENV PURE_S3_ENABLE=
ENV PURE_S3_BUCKET=
ENV PURE_S3_REGION=
ENV PURE_S3_ENDPOINT=
ENV PURE_S3_ACCESS_KEY=
ENV PURE_S3_SECRET=
ENV PURE_MAIL_ENABLE=
ENV PURE_MAIL_HOST=
ENV PURE_MAIL_PORT=
ENV PURE_MAIL_USER=
ENV PURE_MAIL_PASS=
# ENV PURE_SEARCH_ENABLE
# ENV PURE_SEARCH_HOST
# ENV PURE_SEARCH_MASTER_KEY
# ENV PURE_SEARCH_ADMIN_API_KEY
# ENV PURE_SEARCH_API_KEY

# Start fresh from a smaller image
FROM alpine:3.9 
RUN apk add ca-certificates

COPY --from=build_base /tmp/purebackend/out/purebackend /app/purebackend

# This container exposes port 8080 to the outside world
EXPOSE $HOST_PORT

# Run the binary program produced by `go install`
CMD ["/app/purebackend"]