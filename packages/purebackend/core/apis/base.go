package apis

import (
	authmiddlewares "github.com/PureMLHQ/PureML/packages/purebackend/auth/middlewares"
	"github.com/PureMLHQ/PureML/packages/purebackend/core"
	coreservice "github.com/PureMLHQ/PureML/packages/purebackend/core/apis/service"
	authservice "github.com/PureMLHQ/PureML/packages/purebackend/auth/api/service"
	userorgservice "github.com/PureMLHQ/PureML/packages/purebackend/user_org/api/service"
	datasetservice "github.com/PureMLHQ/PureML/packages/purebackend/dataset/api/service"
	modelservice "github.com/PureMLHQ/PureML/packages/purebackend/model/api/service"
	"github.com/PureMLHQ/PureML/packages/purebackend/core/config"
	"github.com/PureMLHQ/PureML/packages/purebackend/docs" // docs is generated by Swag CLI
	_ "github.com/joho/godotenv/autoload"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	echoSwagger "github.com/swaggo/echo-swagger"
)

// const trailedPath = "/_/"

func InitApi(app core.App) (*echo.Echo, error) {
	// Echo instance
	e := echo.New()

	// Middleware
	// e.Use(middleware.Logger())
	e.Use(middleware.Recover())
	e.Use(authmiddlewares.AuthenticateJWT(app))
	e.Use(authmiddlewares.AuthenticateAPI(app))

	// bindStaticUI(e)

	rg := e.Group("/api")

	//Health API
	coreservice.BindHealthApi(app, rg)

	//Swagger API
	rg.GET("/swagger/*", echoSwagger.WrapHandler)
	docs.SwaggerInfo.Title = "PureML API Documentation"
	docs.SwaggerInfo.Description = "API Documentation for PureML backend"
	docs.SwaggerInfo.Version = "1.0"
	docs.SwaggerInfo.Host = config.GetHost()
	docs.SwaggerInfo.BasePath = "/api/"
	docs.SwaggerInfo.Schemes = []string{config.GetScheme()}

	//Org APIs
	authservice.BindAdminApi(app, rg)
	authservice.BindUserApi(app, rg)
	userorgservice.BindOrgApi(app, rg)
	userorgservice.BindUserOrgApi(app, rg)

	//Model APIs
	modelservice.BindModelApi(app, rg)
	modelservice.BindModelReadmeApi(app, rg)
	modelservice.BindModelBranchApi(app, rg)
	modelservice.BindModelBranchVersionApi(app, rg)
	modelservice.BindModelReviewApi(app, rg)
	modelservice.BindModelLogsApi(app, rg)
	modelservice.BindModelActivityApi(app, rg)

	//Dataset APIs
	datasetservice.BindDatasetApi(app, rg)
	datasetservice.BindDatasetReadmeApi(app, rg)
	datasetservice.BindDatasetBranchApi(app, rg)
	datasetservice.BindDatasetBranchVersionApi(app, rg)
	datasetservice.BindDatasetReviewApi(app, rg)
	datasetservice.BindDatasetLogsApi(app, rg)
	datasetservice.BindDatasetActivityApi(app, rg)

	//Secret APIs
	userorgservice.BindSecretsApi(app, rg)

	return e, nil
}

// StaticDirectoryHandler is similar to `echo.StaticDirectoryHandler`
// but without the directory redirect which conflicts with RemoveTrailingSlash middleware.
//
// If a file resource is missing and indexFallback is set, the request
// will be forwarded to the base index.html (useful also for SPA).
//
//	@see	https://github.com/labstack/echo/issues/2211
// func StaticDirectoryHandler(fileSystem fs.FS, e *echo.Echo, indexFallback bool) echo.HandlerFunc {
// 	return func(c echo.Context) error {
// 		p := c.Param("*")

// 		// escape url path
// 		tmpPath, err := url.PathUnescape(p)
// 		if err != nil {
// 			return fmt.Errorf("failed to unescape path variable: %w", err)
// 		}
// 		p = tmpPath

// 		// fs.FS.Open() already assumes that file names are relative to FS root path and considers name with prefix `/` as invalid
// 		name := filepath.ToSlash(filepath.Clean(strings.TrimPrefix(p, "/")))

// 		fileErr := e.FileFS(c.Path(), name, fileSystem)

// 		if fileErr != nil && indexFallback && errors.Is(fileErr, echo.ErrNotFound) {
// 			return e.FileFS("index.html", fileSystem)
// 		}

// 		return fileErr
// 	}
// }

// bindStaticUI registers the endpoints that serves the static  UI.
// func bindStaticUI(e *echo.Echo) error {
// 	// redirect to trailing slash to ensure that relative urls will still work properly
// 	e.GET(
// 		strings.TrimRight(trailedPath, "/"),
// 		func(c echo.Context) error {
// 			return c.Redirect(http.StatusTemporaryRedirect, trailedPath)
// 		},
// 	)

// 	// e.FileFS(trailedPath+"*", "index.html", ui.BuildIndexFS)
// 	// serves static files from the /ui/public/build directory
// 	// (similar to echo.StaticFS but with gzip middleware enabled)
// 	e.GET(
// 		trailedPath+"build/*",
// 		echo.StaticDirectoryHandler(ui.BuildDirFS, false),
// 		middleware.Gzip(),
// 	)
// 	e.GET(
// 		trailedPath+"*",
// 		echo.StaticDirectoryHandler(ui.BuildIndexFS, false),
// 		middleware.Gzip(),
// 	)

// 	return nil
// }
